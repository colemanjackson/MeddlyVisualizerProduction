package main;

import java.io.IOException;
import java.util.ArrayList;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;
import logic.ForestInfoParser;

public class ApplicationExecution extends Application {
	private static ForestInfoParser applicationInfoParser;
	private static int refreshRate = 150;
	private static String fileToReadFrom = "qc4.txt";
	private boolean stopOnNextPLine = false;

	public static void main(String[] args) {
		try {
			handleArgs(args);
			applicationInfoParser = new ForestInfoParser(fileToReadFrom);
			launch(args); // Calls start()
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void handleArgs(String[] args) {
		if (args.length > 0) {
			for (int i = 0; i < args.length; i++) {
				if (args[i].equals("-f"))
					fileToReadFrom = args[i + 1];
				if (args[i].equals("-r"))
					refreshRate = Integer.parseInt(args[i + 1]);
				if (args[i].equals("-h")) {
					System.out
							.println("Format of command line is javac NameOfProgram.java -f [filename] -r [refreshRate]");
					return;
				}
			}
		}
	}

	private ComboBox<Double> createTimerOptions(double... options) {
		ObservableList<Double> data = FXCollections.observableArrayList();

		for (Double option : options) {
			data.add(option);
		}

		return new ComboBox<Double>(data);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void start(Stage stage) {

		// Build Initial control buttons and set up bar chart axis
		final NumberAxis xAxis = new NumberAxis();
		final CategoryAxis yAxis = new CategoryAxis();
		final BarChart<Number, String> bc = new BarChart<Number, String>(xAxis,
				yAxis);
		Timeline tl = new Timeline();
		bc.setTitle("Summary of Forest Count");
		bc.setAnimated(true);
		bc.setMinHeight(600);
		Button btnStart = new Button("Start");
		Button btnStop = new Button("Stop");
		Button btnStepToNewStatus = new Button("Run To Next Status");
		btnStart.setMaxSize(150, 50);
		btnStop.setMaxSize(150, 50);
		btnStepToNewStatus.setMaxSize(150, 50);
		xAxis.setLabel("Number of nodes");
		xAxis.setTickLabelRotation(90);
		yAxis.setLabel("Forest Level");
		XYChart.Series series = null;
		Text status = new Text(10, 50, "No Update");
		status.setFont(new Font(20));

		ComboBox<Double> timerOptions = createTimerOptions(50, 100, 150, 200,
				250, 300);
		// Define handlers for control buttons
		btnStart.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				tl.play();
			}

		});

		btnStop.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				tl.stop();

			}

		});

		btnStart.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				tl.play();
			}

		});

		btnStepToNewStatus.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg) {
				if (!stopOnNextPLine)
					stopOnNextPLine = true;
			}
		});

		// Data Parse Block and initialize series for timeline building
		try {

			series = applicationInfoParser.initalizeForestInfo();

		} catch (IOException e) {
			e.printStackTrace();
		}

		// Animation Block - Each KeyFrame represents a new scene in thetimeline.
		handleTimeline(tl, bc, status);

		VBox contentPane = new VBox();
		contentPane.getChildren().addAll(bc, btnStart, btnStop,
				btnStepToNewStatus, status);
		Scene scene = new Scene(contentPane, 800, 600);
		bc.getData().addAll(series);
		stage.setScene(scene);
		stage.show();
	}

	public void handleTimeline(Timeline tl, BarChart<Number, String> bc, Text status) {
		tl.getKeyFrames().addAll(
				new KeyFrame(Duration.millis(refreshRate),
						new EventHandler<ActionEvent>() {
							@Override
							public void handle(ActionEvent actionEvent) {

								// Get the proper series from the bar chart
								// TODO: Allow for multiple series using forest
								// ID
								XYChart.Series<Number, String> series = bc
										.getData().get(0);

								try {
									// Parse the updates for the chart from the
									// file stream
									ArrayList<Integer> currentInfo = applicationInfoParser
											.parseNodeInfo();

									// Ensure the arraylist containing the
									// values is populated
									if (currentInfo.size() > 0) {

										// forest id of -1 means a phase change
										// has been reached. Check and see if
										// the timeline should be stopped.
										if (currentInfo.get(0) == -1
												&& stopOnNextPLine) {
											tl.stop();
											stopOnNextPLine = false;
										}

										// Otherwise,
										// get the anc and the level for the
										// series to be updated
										int anc = currentInfo.get(1);
										int level = currentInfo.get(2);

										// Set the text of the status
										status.setText(applicationInfoParser
												.getStatus().toString());

										// Get the level of the bar chart to
										// update
										XYChart.Data<Number, String> levelOfBarChartToUpdate = (XYChart.Data<Number, String>) series
												.getData().get(
														(int) (level - 1));

										// Apply the active node change to the
										// bar level
										levelOfBarChartToUpdate
												.setXValue(levelOfBarChartToUpdate
														.getXValue().intValue()
														+ anc);

									} else {
										status.setText("Visualization Complete, No New Data");
										tl.stop();
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}));
		tl.play();
	}

}
