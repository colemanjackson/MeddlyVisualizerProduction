package logic;

import info.ForestInfo;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Series;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;

public class ForestInfoParser {
	private static ForestInfo forestInfo = null;
	private static BufferedReader br = null;
	private static JSONParser parser = null;
	static int firstTime;

	public ForestInfoParser()  {
		// TODO:Add Filestream abilities to buffered Reader
		try {
			this.br = new BufferedReader(new FileReader("qc01.json"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.parser = new JSONParser();
		firstTime = 0;
	}

	public static Series initalizeForestInfoFromJsonFile() throws IOException {
		try {
			String stringOfForestInfo = br.readLine();
			System.out.println("Record:\t" + stringOfForestInfo);

			Object obj;
			JSONObject jsonObject = new JSONObject();
			obj = parser.parse(stringOfForestInfo);
			jsonObject = (JSONObject) obj;
			forestInfo = new ForestInfo(jsonObject);
			return forestInfo.getSeries();

		} catch (Exception e) {
			if (br != null)
				br.close();
			e.printStackTrace();
		}
		return null;
	}

	public static boolean readNodeInfoFromJsonFile(Series series)
			throws org.json.simple.parser.ParseException, IOException {

		try {

			String sCurrentLine;
			if ((sCurrentLine = br.readLine()) != null) {
				System.out.println("Record:\t" + sCurrentLine);
				if (firstTime == 0) {
					Thread.sleep(5000);
					firstTime++;
				}

				Object obj;
				JSONObject jsonObject = new JSONObject();
				try {

					obj = parser.parse(sCurrentLine);
					jsonObject = (JSONObject) obj;
					// self.active_node_count[level - 1] =
					// self.active_node_count[level - 1] +
					// int(json_node_info["anc"])
					// print "Updating Forest Info: Active Nodes: " +
					// str(forest_info.active_node_count)
					// level = int(json_node_info["l"])
					// self.active_node_count[level - 1] =
					// self.active_node_count[level - 1] +
					// int(json_node_info["anc"])
					// rects[level - 1].set_height(self.active_node_count[level
					// - 1])

					if (jsonObject.get("f") != null) {

						Long id = (Long) jsonObject.get("f");
						System.out.println(id);

						Long level = (Long) jsonObject.get("l");
						System.out.println(level);

						Long anc = (Long) jsonObject.get("anc");
						System.out.println(anc);
						// for (XYChart.Data<Number, String> data :
						// series
						// .getData()) {
						// data.setXValue(Math.random() * 1000);
						// }
						XYChart.Data<Number, String> x = (XYChart.Data<Number, String>) series
								.getData().get((int) (level - 1));
						x.setXValue(x.getXValue().longValue() + anc);
					}
				}

				catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (Exception ei) {
					ei.printStackTrace();
				}
				return true;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		br.close();
		return false;
	}

	public ForestInfo getForestInfo() {
		return forestInfo;
	}
}